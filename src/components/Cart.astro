---
import { BiChevronLeft, BiSolidTrashAlt  } from "react-icons/bi";
---

<button class="icon-cart fixed cursor-pointer transition-all hover:scale-90 lg:bottom-[130px] right-5 lg:right-10 bottom-[140px] w-[50px] h-[50px] lg:h-[70px] lg:w-[70px] rounded-full bg-[#404040] grid place-items-center scale-0">
    <div class="absolute w-6 h-6 bg-amber-700 rounded-full top-0 right-0 text-white grid place-items-center number text-sm lg:text-md z-40">4</div>
    <img src="https://www.svgrepo.com/show/493949/cart-lines-1.svg" width="30" style="filter: invert(100%) sepia(0%) saturate(1%) hue-rotate(80deg) brightness(107%) contrast(101%);" />
</button>

<div class="cart-list fixed w-full md:w-[450px] bg-white shadow-2xl right-0 top-0 z-40 h-full overflow-auto scale-0 transition-all">
    <div class="p-5 md:p-10">
        <BiChevronLeft className="text-3xl cursor-pointer cart-list--close" />
        <h1 class="text-5xl md:text-5xl font-bold text-gray-950 text-center">Carrito</h1>

        <div class="accordions is-first-expanded flex flex-col gap-3 mt-5">
            <article class="accordion">
              <header class="accordion-head p-5 bg-[#00000026] text-[#404040] rounded-xl flex justify-between">
                <span class="font-bold">Métodos de pago</span>
                <span class="icon has-text-primary">
                    <i class="fas fa-chevron-right"></i>
                </span>
              </header>
     
              <div class="accordion-body">
                <div class="content p-5">
                    <div class="custom-choose mb-3">
                        <input type="radio" id="payment-mobile" value="Pago Móvil" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-mobile">Pago Móvil</label>

                        <input type="radio" id="payment-cash" value="Efectivo" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-cash">Efectivo</label>

                        <input type="radio" id="payment-zelle" value="Zelle" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-zelle">Zelle</label>

                        <input type="radio" id="payment-zinli" value="Zinli" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-zinli">Zinli</label>

                        <input type="radio" id="payment-binance" value="Binance Pay" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-binance">Binance Pay</label>
                        
                        <input type="radio" id="payment-paypal" value="PayPal" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-paypal">PayPal + Comisión</label>

                        <input type="radio" id="payment-moneyways" value="MoneyWays" name="payment-method">
                        <label class="font-bold text-[#141518]" for="payment-moneyways">MoneyWays</label>
                    </div>
                </div>
              </div>
            </article>
            <article class="accordion">
              <header class="accordion-head p-5 bg-[#00000026] text-[#404040] rounded-xl flex justify-between">
                <span class="font-bold">Métodos de entrega</span>
                <span class="icon has-text-primary">
                    <i class="fas fa-chevron-right"></i>
                </span>
              </header>
              <div class="accordion-body">
                <div class="content p-5">
                    <div class="custom-choose mb-3 uppercase">
                        <input type="radio" id="delivery-nacional" value="Envío nacional" name="delivery-method">
                        <label for="delivery-nacional" class="delivery national flex flex-col items-center"><span class="font-bold text-2xl">Envío nacional</span> <span class="text-sm">todo el país (cobro destino)</span></label>

                        <input type="radio" id="pick-up" value="Pick-up Santa Mónica o prados del este $0" name="delivery-method">
                        <label for="pick-up" class="delivery pickup flex flex-col items-center">   
                            <div class="text-2xl"><span class="font-bold">pick-up</span> <span class="font-light">caracas</span></div>
                            <span class="text-sm">santa mónica o prado del este</sp>
                        </label>

                        <input type="radio" id="delivery-caracas" value="Delivery $5" name="delivery-method">
                        <label for="delivery-caracas" class="delivery delivery-caracas flex justify-center items-center gap-[4px]">
                            <div class="flex flex-col ml-[9px]">
                                <span class="text-[26px] font-bold">delivery</span>
                                <span class="font-semibold -mt-2 text-[14px]">a toda caracas</span>
                            </div>
                            <span class="text-[35px] flex font-bold mt-[3px]"><span class="mr-[-2px]">$</span><span>5</span></span>
                        </label>
                    </div>
                </div>
              </div>
            </article>
            <article class="accordion">
                <header class="accordion-head p-5 bg-[#00000026] text-[#404040] rounded-xl flex justify-between">
                  <span class="font-bold">Datos del cliente</span>
                  <span class="icon has-text-primary">
                      <i class="fas fa-chevron-right"></i>
                  </span>
                </header>
       
                <div class="accordion-body">
                  <div class="content p-5">
                    <div class="input-nameLastname">
                        <label for="first_name" class="block mb-2 text-sm  text-[#404040] font-bold">Nombre y Apellido</label>
                        <input type="text" id="first_name" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Peter Johnson" required />
                    </div>
                    <div class="input-number-receive mt-3">
                        <label for="first_name" class="block mb-2 text-sm  text-[#404040] font-bold">Número de la persona que recibe</label>
                        <input type="text" id="first_name" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: 04241305636" required />
                    </div>
                    <div class="input-number-plus mt-3">
                        <label for="first_name" class="block mb-2 text-sm  text-[#404040] font-bold">Número de teléfono alternativo</label>
                        <input type="text" id="first_name" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: 04241305636 (OPCIONAL)" required />
                    </div>
                    <div class="input-date-receive mt-3">
                        <label for="first_name" class="block mb-2 text-sm  text-[#404040] font-bold">Fecha que desea recibir su pedido</label>
                        <input type="text" id="first_name" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Miércoles, 15 de Enero" required />
                    </div>
                    <div class="input-time-receive mt-3">
                        <label for="first_name" class="block mb-2 text-sm  text-[#404040] font-bold">Horario disponible para recibir</label>
                        <input type="text" id="first_name" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Desde las 10:00 hasta las 02:30" required />
                    </div>
                    <div class="data-zone hidden">
                        <div class="mt-3 input-zone">
                            <label for="zone" class="block mb-2 text-sm font-bold text-[#404040]">Zona de entrega para el delivery</label>
                            <input type="text" id="zone" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Bello Monte" required />
                        </div>
                        <div class="mt-3 input-address">
                            <label for="zone" class="block mb-2 text-sm font-bold text-[#404040]">Dirección</label>
                            <input type="text" id="zone" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Av. Principal Colinas de Bello Monte" required />
                        </div>
                        <div class="mt-3 input-reference">
                            <label for="zone" class="block mb-2 text-sm font-bold text-[#404040]">Punto de referencia</label>
                            <input type="text" id="zone" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Al lado de Cinecitta, cerca del metro" required />
                        </div>
                        <div class="mt-3 input-plus">
                            <label for="zone" class="block mb-2 text-sm font-bold text-[#404040]">Información adicional</label>
                            <input type="text" id="zone" class="bg-gray-50 font-semibold border border-gray-300 text-[#404040] text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 placeholder:text-[#404040bd] placeholder:font-semibold" placeholder="Ej: Necesito $5 vuelto, llamar antes de venir" required />
                        </div>
                    </div>
                    
                  </div>
                </div>
            </article>
          
            <div class="cards mt-5 flex flex-col gap-16 pb-64 cart-items"></div>
          </div>
    </div>
    <div class="fixed w-full md:w-[450px] px-5 md:px-10 py-5 right-0 bottom-0 bg-white text-white flex flex-col items-end">
        <div class="bg-[#404040] w-full p-3">
            <div class="text-3xl font-bold mb-3">Total:</div>
            <div class="flex justify-between text-xl">
                <div class="total-bcv">$65 BCV</div> 
                <span>
                    Divisas <span class="total-divisas"></span>
                </span>
            </div>
            <span class="text-2xl total-bs -mt-[3px] inline-block"></span>
            <div class="flex gap-4 mt-5 w-full justify-end">
                <button class="clear-cart w-13 rounded-full p-3 bg-white text-[#404040] text-xl uppercase font-bold cursor-pointer transition-all hover:scale-95 grid place-items-center">
                    <BiSolidTrashAlt />
                </button>
                <button class="rounded-full p-3 bg-white text-[#404040] text-md uppercase font-bold cursor-pointer transition-all hover:scale-95 checkout">
                    realizar pedido
                </button>
            </div>
        </div>
    </div>
    <a href="#" target="_blank" class="send-checkout"></a>
</div>

<script type="text/javascript">

    const cartKey = 'cart';
    let cart = JSON.parse(localStorage.getItem(cartKey)) || [];
    const icon = document.querySelector('.icon-cart');
    const total = cart.reduce((sum, book) => sum + book.quantity, 0);
    const cartList = document.querySelector('.cart-list');
    const cartListClose = document.querySelector('.cart-list .cart-list--close');
    const cartitems = document.querySelector('.cart-items');
    const totalBcv = document.querySelector('.total-bcv')
    const totalBs = document.querySelector('.total-bs')
    const totalDivisas = document.querySelector('.total-divisas')
    const clearCart = document.querySelector('.clear-cart')
    
    if (cart.length > 0) {
        icon.querySelector('.number').textContent = total;
        icon.classList.remove('scale-0');
        handleCartList();
        console.log('cart-precar')
    }

    icon.onclick = (e) => {
        e.preventDefault();
        cartList.classList.remove('scale-0');
        console.log('CartIcon')
    }
    cartListClose.onclick = (e) => {
        e.preventDefault();
        cartList.classList.add('scale-0');
    }

    function handleQuantity(action, name) {
        let cart = JSON.parse(localStorage.getItem(cartKey));
        const bookIndex = cart.findIndex(book => book.NombreLibro === name);
        console.log({
            action,
            name,
            bookIndex,
            cart
        })
        
        
        if (action === 'sum' || action === 1) {
            console.log({
                action: 'sumar',
                quantity: cart[bookIndex].quantity
            })
            cart[bookIndex].quantity += 1;
            cart[bookIndex].totalBCV = (cart[bookIndex].quantity * Number(cart[bookIndex].BCV));
            cart[bookIndex].totalDivisas = (cart[bookIndex].quantity * Number(cart[bookIndex].Precio));
        } else {
            console.log({
                action: 'resta',
                quantity: cart[bookIndex].quantity
            })

            cart[bookIndex].quantity -= 1;
            cart[bookIndex].totalBCV = (cart[bookIndex].quantity * Number(cart[bookIndex].BCV));
            cart[bookIndex].totalDivisas = (cart[bookIndex].quantity * Number(cart[bookIndex].Precio));
        }
        if (cart[bookIndex].quantity <= 0) {
            cart.splice(bookIndex, 1); // Remove the book from the cart if quantity is 0 or less
        }
        console.log(cart)

        localStorage.setItem(cartKey, JSON.stringify(cart));

        handleCartList();

    }

    function handleCartList() {
        let cart = JSON.parse(localStorage.getItem(cartKey));
        cartitems.innerHTML = '';
        console.log({
            cart,
            type: 'test'
        })
        icon.querySelector('.number').textContent = cart.reduce((sum, book) => sum + book.quantity, 0);
        if (cart.length > 0) {
            cart.map((book, index) => {
                const bookImage = book.Imagen.split('/')
                const image = bookImage[bookImage.length - 1]
                cartitems.innerHTML += `
                <div class="shadow-2xl">
                    <div class="p-3 flex items-center gap-3">
                        <img src="./images/${ image }" class="shadow-2xl" width="150" alt="BookName" />
                        <div class="flex flex-col w-full"> 
                            <div class="flex flex-col text-[#404040] font-bold">
                                <h2 class="text-xl text-[#404040] mb-6 ml-[6px] leading-[1]">${ book.NombreLibro }</h2>
                                <span class="text-xl font-light inline-flex mr-[18px] justify-end  gap-1 uppercase">$${ book.BCV } bcv</span>
                                <span class="text-xl inline-flex mr-[18px] justify-end  gap-1 uppercase">$${ book.Precio } divisas</span>
                            </div>
                            <div class="flex justify-around items-center mt-4 book-item" data-name="${ book.NombreLibro }">
                                <button class="remove-book cursor-pointer transition-all active:scale-90 grid place-items-center text-xl md:text-2xl rounded-full bg-[#404040] w-7 md:w-8 h-7 md:h-8 font-semibold text-white">-</button>
                                <span class="text-3xl md:text-6xl font-bold text-[#404040] book-quantity">${ book.quantity }</span>
                                <button class="add-book cursor-pointer transition-all active:scale-90 grid place-items-center text-xl md:text-2xl rounded-full bg-[#404040] w-7 md:w-8 h-7 md:h-8 font-semibold text-white">+</button>
                            </div>
                        </div>
                    </div>
                </div>`;
                reloadTotals()
                const triggersAdd = document.querySelectorAll('.add-book')
                const triggersRm = document.querySelectorAll('.remove-book')
                triggersAdd.forEach(x => {
                    x.onclick = (e) => {
                        e.preventDefault()
                        handleQuantity('sum', x.parentElement.attributes['data-name'].textContent)
                    }
                })
                triggersRm.forEach(x => {
                    x.onclick = (e) => {
                        e.preventDefault()
                        handleQuantity('res', x.parentElement.attributes['data-name'].textContent)
                    } 
                })
            })
        } else {
            cartitems.innerHTML = 'No se han añadido libros.';
            cartList.classList.add('scale-0');
            icon.classList.add('scale-0');
        }
    }
    async function DOLLARS() {
        return {
            bcv: await axios.get('https://ve.dolarapi.com/v1/dolares/oficial'),
            paralelo: await axios.get('https://ve.dolarapi.com/v1/dolares/paralelo')
        }
    }
    function numberFormat(number) {
        let str = number.toString();
        let res = "";
        for (let i = 0; i < str.length; i++) {
            res += str[i];
            if ((str.length - i - 1) % 3 === 0 && i < str.length - 1) {
                res += ".";
            }
        }
        if (res.length >= 3) {
            res = res.slice(0, res.length - 4) + ',' + res.slice(res.length - 2);
        }
        return res;
    }
    function reloadTotals() {
        let data = JSON.parse(localStorage.getItem(cartKey));
        let delivery = JSON.parse(localStorage.getItem('delivery')) || 0;
        console.log(delivery)
        totalBcv.textContent = `${(parseFloat(data.reduce((sum, book) => Number(sum) + Number(book.totalBCV), 0).toFixed(2)) + parseInt(delivery)).toFixed(2) } BCV`;
        totalDivisas.textContent = `$${parseFloat(data.reduce((sum, book) => Number(sum) + Number(book.totalDivisas), 0).toFixed(2)) + parseInt(delivery)}`;
        (async () => {
            try {
                const response = await DOLLARS();
                const bcv = response.bcv.data
                totalBs.textContent = `Bs. ${numberFormat((bcv.promedio * (parseFloat(data.reduce((sum, book) => Number(sum) + Number(book.totalBCV), 0).toFixed(2)) + parseInt(delivery))).toFixed(2)).replace('..','.')}`
            } catch (error) {
                console.error('Error DOLLARS data:', error);
            }
        })();
    }
    clearCart.onclick = (e) => {
        e.preventDefault();
        if (confirm('¿Esta seguro de limpiar el carrito?')) {
            localStorage.removeItem(cartKey)
            cartList.classList.add('scale-0');
            icon.classList.add('scale-0');
        }
    }

   const Accordion = {
	settings: {
		// Expand the first item by default
		first_expanded: false,
		// Allow items to be toggled independently
		toggle: true
	},

	openAccordion: function(toggle, content) {
		if (content.children.length) {
			toggle.classList.add("is-open");
			let final_height = Math.floor(content.children[0].offsetHeight);
			content.style.height = final_height + "px";
		}
	},

	closeAccordion: function(toggle, content) {
		toggle.classList.remove("is-open");
		content.style.height = 0;
	},

	init: function(el) {
		const _this = this;

		// Override default settings with classes
		let is_first_expanded = _this.settings.first_expanded;
		if (el.classList.contains("is-first-expanded")) is_first_expanded = true;
		let is_toggle = _this.settings.toggle;
		if (el.classList.contains("is-toggle")) is_toggle = true;

		// Loop through the accordion's sections and set up the click behavior
		const sections = el.getElementsByClassName("accordion");
		const all_toggles = el.getElementsByClassName("accordion-head");
		const all_contents = el.getElementsByClassName("accordion-body");
		for (let i = 0; i < sections.length; i++) {
			const section = sections[i];
			const toggle = all_toggles[i];
			const content = all_contents[i];

			// Click behavior
			toggle.addEventListener("click", function(e) {
				if (!is_toggle) {
					// Hide all content areas first
					for (let a = 0; a < all_contents.length; a++) {
						_this.closeAccordion(all_toggles[a], all_contents[a]);
					}

					// Expand the clicked item
					_this.openAccordion(toggle, content);
				} else {
					// Toggle the clicked item
					if (toggle.classList.contains("is-open")) {
						_this.closeAccordion(toggle, content);
					} else {
						_this.openAccordion(toggle, content);
					}
				}
			});

			// // Expand the first item
			// if (i === 2) {
			// 	_this.openAccordion(toggle, content);
			// }
		}
	}
};

(function() {
	// Initiate all instances on the page
	const accordions = document.getElementsByClassName("accordions");
	for (let i = 0; i < accordions.length; i++) {
		Accordion.init(accordions[i]);
	}
})();
const dataZone = document.querySelector('.data-zone'); // 235px
const inputNameLastname = document.querySelector('.input-nameLastname');
const inputNumberReceive = document.querySelector('.input-number-receive');
const inputNumberPlus = document.querySelector('.input-number-plus');
const inputDateReceive = document.querySelector('.input-date-receive');
const inputTimeReceive = document.querySelector('.input-time-receive');
const inputZone = document.querySelector('.input-zone');
const inputAddress = document.querySelector('.input-address');
const inputReference = document.querySelector('.input-reference');
const inputPlus = document.querySelector('.input-plus');


const delivery = document.querySelectorAll('.delivery');
delivery.forEach(item => {
    item.onclick = (e) => {

        if (item.classList.contains('delivery-caracas')) {
            localStorage.setItem('delivery', 5);
            localStorage.setItem('deliveryType', 'pay');
            dataZone.classList.remove('hidden')
            console.log(dataZone.parentElement.parentElement)
            dataZone.parentElement.parentElement.style.height = `772px`
            inputDateReceive.querySelector('label').textContent = 'Fecha que desea recibir su pedido'
            inputTimeReceive.querySelector('label').textContent = 'Horario disponible para recibir'
            inputTimeReceive.querySelector('input').placeholder = 'Ej: Desde las 10:00 hasta las 02:30'
        } 
        if (item.classList.contains('national')) {
            localStorage.setItem('delivery', 0);
            localStorage.setItem('deliveryType', 'national');
            dataZone.classList.add('hidden')
            inputNumberReceive.classList.add('hidden')
            inputNumberPlus.classList.add('hidden')
            inputDateReceive.classList.add('hidden')
            inputTimeReceive.classList.add('hidden')
            dataZone.parentElement.parentElement.style.height = `112px`
            inputDateReceive.querySelector('label').textContent = 'Fecha que desea recibir su pedido'
            inputTimeReceive.querySelector('label').textContent = 'Horario disponible para recibir'
            inputTimeReceive.querySelector('input').placeholder = 'Ej: Desde las 10:00 hasta las 02:30'
        }
        
        if (item.classList.contains('pickup')) {
            localStorage.setItem('delivery', 0);
            localStorage.setItem('deliveryType', 'pickup');
            dataZone.parentElement.parentElement.style.height = `442px`
            dataZone.classList.add('hidden')
            inputDateReceive.querySelector('label').textContent = 'Fecha en la que retirará'
            inputTimeReceive.querySelector('label').textContent = 'Hora en la que retirará'
            inputTimeReceive.querySelector('input').placeholder = 'Ej: 02:00pm'
            inputNumberReceive.classList.remove('hidden')
            inputNumberPlus.classList.remove('hidden')
            inputDateReceive.classList.remove('hidden')
            inputTimeReceive.classList.remove('hidden')
        }
        reloadTotals();
    }
});
const dataDelivery = localStorage.getItem('delivery');
const dataTypeDelivery = localStorage.getItem('deliveryType');
if (dataDelivery == '5') {
    delivery[2].previousElementSibling.checked = true;
    dataZone.classList.remove('hidden')
}
if (dataTypeDelivery == 'national') {
    delivery[0].previousElementSibling.checked = true;
    inputNumberReceive.classList.add('hidden')
    inputNumberPlus.classList.add('hidden')
    inputDateReceive.classList.add('hidden')
    inputTimeReceive.classList.add('hidden')
}

const checkout = document.querySelector('.checkout');
checkout.onclick = (e) => {
    const books = JSON.parse(localStorage.getItem(cartKey));
    const dataTypeDelivery = localStorage.getItem('deliveryType');
    e.preventDefault();
    const paymentMethod = document.querySelector('[name="payment-method"]:checked')
    const deliveryMethod = document.querySelector('[name="delivery-method"]:checked')
    const totalBCV = document.querySelector('.total-bcv')
    const totalBS = document.querySelector('.total-bs')
    const totalDivisas = document.querySelector('.total-divisas')
    const sendCheckout = document.querySelector('.send-checkout')

    if (!paymentMethod) {
        return alert('No ha elegido un método de pago');
    }
    if (!deliveryMethod) {
        return alert('No ha elegido un método de entrega');
    }
    console.log(dataTypeDelivery)
    if (dataTypeDelivery == 'national') {
        if (inputNameLastname.querySelector('input').value == '') {
            return alert('Se requiere colocar el nombre')
        }
    } else {
        if (inputNameLastname.querySelector('input').value == '' ||
            inputNumberReceive.querySelector('input').value == '' ||
            inputDateReceive.querySelector('input').value == '' ||
            inputTimeReceive.querySelector('input').value == '') {
            return alert('Se requiere colocar los datos del cliente')
        }
    }
    if (inputZone.querySelector('input').value == '' && localStorage.getItem('delivery') == '5') {
        return alert('Se requiere colocar la zona de entrega para el delivery')
    }
    if (inputReference.querySelector('input').value == '' && localStorage.getItem('delivery') == '5') {
        return alert('Se requiere colocar el punto de referencia')
    }
    if (inputPlus.querySelector('input').value == '' && localStorage.getItem('delivery') == '5') {
        return alert('Se requiere colocar la información adicional')
    }
    if (inputAddress.querySelector('input').value == '' && localStorage.getItem('delivery') == '5') {
        return alert('Se requiere colocar la dirección')
    }

    const booksStr = books.map(book => { return `• ${book.quantity} x ${book.NombreLibro} *$${paymentMethod.value != 'Pago Móvil' ? Number(book.totalDivisas).toFixed(2) : Number(book.totalBCV).toFixed(2)}*\n`}).join('')
    const totalBcvBooks = books.reduce((sum, book) => Number(sum) + Number(book.totalBCV), 0).toFixed(2)
    const totalDivisasBooks = books.reduce((sum, book) => Number(sum) + Number(book.totalDivisas), 0).toFixed(2)

    const message = `https://api.whatsapp.com/send?phone=+584241305636&text=*NUEVO PEDIDO 📚*
    %0A%0A${encodeURIComponent(booksStr)}
    %0A%0A*Productos:* ${paymentMethod.value !== 'Pago Móvil' ? `$${totalDivisasBooks}` : `$${totalBcvBooks}`}
    %0A%0A*Método de entrega:* ${deliveryMethod.value}
    %0A%0A*Total:* ${paymentMethod.value !== 'Pago Móvil' ? totalDivisas.textContent : `$${totalBCV.textContent} (${totalBS.textContent})`} 
    %0A%0A*Forma de pago:* ${paymentMethod.value}
    ${dataTypeDelivery !== 'national' ? 
    `%0A%0A📞*Teléfono:* ${inputNumberReceive.querySelector('input').value}
    ${inputNumberPlus.querySelector('input').value !== '' ? `%0A%0A📞*Teléfono alternativo:* ${inputNumberReceive.querySelector('input').value}`: ''}
    %0A%0A📆*Fecha de la entrega:* ${inputDateReceive.querySelector('input').value}
    %0A%0A⌚*Horario disponible:* ${inputTimeReceive.querySelector('input').value}`:
    `%0A%0A*Nombre del cliente:* ${inputNameLastname.querySelector('input').value}`}
    ${localStorage.getItem('delivery') == '5' ? `
    %0A%0A📍*Zona de entrega:* ${inputZone.querySelector('input').value}
    %0A%0A🏠*Dirección:* ${inputAddress.querySelector('input').value}
    %0A%0A📍*Punto de referencia:* ${inputReference.querySelector('input').value}
    %0A%0A📌*Información adicional:* ${inputPlus.querySelector('input').value}`:''}`;

    sendCheckout.href = message

    console.log({
        books,
        paymentMethod: paymentMethod.value,
        deliveryMethod: deliveryMethod.value,
        totalBCV: totalBCV.textContent,
        totalBS: totalBS.textContent,
        divisas: totalDivisas.textContent
    })
    sendCheckout.click();
}
</script>

<style scoped>
.accordion:first-child .accordion-head {
  border-top: 0;
}
.accordion-head {
  cursor: pointer;
  transition: color 200ms ease-in-out;
}
.accordion-head .icon {
  transition: transform 200ms ease-in-out;
}
.accordion-head.is-open {
  color: white;
  background: #0000009d;
}
.accordion-head.is-open .icon {
  transform: rotate(90deg);
}
.accordion-body {
  overflow: hidden;
  height: 0;
  transition: height 200ms ease-in-out;
}

.custom-choose
{
    display: flex;
    flex-direction: column;
    gap: 15px;
}
.custom-choose input[type='radio'],.custom-choose input[type='checkbox']
{
    display: none;
}
.custom-choose input[type='radio'] + label,.custom-choose input[type='radio']:not(checked) + label
,.custom-choose input[type='checkbox'] + label,.custom-choose input[type='checkbox']:not(checked) + label
{
    padding: 13px 35.5px;
    border: solid 2px #00000026;
    border-radius: 5px;
    text-align: center;
    transition: .4s;
    color: #141518;
    cursor: pointer;
    text-transform: uppercase;
    font-weight: 600;
}
.custom-choose input[type='radio']:checked + label,
.custom-choose input[type='checkbox']:checked + label
{
    position: relative;
    border: solid 2px #141518;
    color: #141518;
    transition: .4s;
}
.custom-choose input[type='radio']:checked + label::before,
.custom-choose input[type='checkbox']:checked + label::before {
    content: '◉';
    position: absolute;
    left: 26px;
    top: 50%; 
    transform: translate(-50%, -50%);
}
</style>

